import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import '../../data/models/survey_feature.dart';

/// Phase 4: Report generation and sharing service
/// takeSnapshot â†’ compose PNG/PDF with snapshot + {survey_no, village, area, date}
/// Save and share with share_plus
class ReportService {
  // Phase 4: Generate and share survey report as PDF
  static Future<void> generateAndShareReport({
    required SurveyFeature feature,
    required Uint8List mapSnapshot,
  }) async {
    try {
      // Generate PDF report
      final pdfBytes = await _generatePdfReport(feature, mapSnapshot);
      
      // Save to temporary directory
      final tempDir = await getTemporaryDirectory();
      final fileName = 'survey_${feature.surveyNumber}_${DateTime.now().millisecondsSinceEpoch}.pdf';
      final file = File('${tempDir.path}/$fileName');
      await file.writeAsBytes(pdfBytes);
      
      // Phase 4: Share with share_plus
      await Share.shareXFiles(
        [XFile(file.path)],
        text: 'Survey Report - ${feature.name} (Survey No: ${feature.surveyNumber})',
        subject: 'Survey Report - ${feature.surveyNumber}',
      );
    } catch (e) {
      throw Exception('Failed to generate report: $e');
    }
  }

  // Phase 4: Generate simple PNG report (alternative)
  static Future<void> generateAndSharePngReport({
    required SurveyFeature feature,
    required Uint8List mapSnapshot,
  }) async {
    try {
      // For now, create a simple text report since map snapshot might be empty
      // In real implementation, you would overlay text on the map snapshot
      
      final tempDir = await getTemporaryDirectory();
      final fileName = 'survey_info_${feature.surveyNumber}_${DateTime.now().millisecondsSinceEpoch}.txt';
      final file = File('${tempDir.path}/$fileName');
      
      // Phase 4: Compose text with survey info + date
      final reportContent = '''
SURVEY REPORT
=============

Survey Number: ${feature.surveyNumber}
Village: ${feature.name}
Owner: ${feature.ownerName}
Area: ${feature.areaDisplay}
Land Classification: ${feature.landClassification}

Location Details:
- District: ${feature.districtName}
- Taluk: ${feature.talukName}
- Hobli: ${feature.hobliName}
- Village: ${feature.villageName}

Coordinates:
- Centroid: ${feature.centroid.latitude.toStringAsFixed(6)}, ${feature.centroid.longitude.toStringAsFixed(6)}
- Total Points: ${feature.rings.fold<int>(0, (sum, ring) => sum + ring.length)}

Generated on: ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}
Generated by: Bhumi Mitra App
''';
      
      await file.writeAsString(reportContent);
      
      // Phase 4: Share the report
      await Share.shareXFiles(
        [XFile(file.path)],
        text: 'Survey Information - ${feature.name} (Survey No: ${feature.surveyNumber})',
        subject: 'Survey Report - ${feature.surveyNumber}',
      );
    } catch (e) {
      throw Exception('Failed to generate PNG report: $e');
    }
  }

  // Phase 4: Generate PDF report with map snapshot
  static Future<Uint8List> _generatePdfReport(
    SurveyFeature feature,
    Uint8List mapSnapshot,
  ) async {
    final pdf = pw.Document();
    
    // Convert map snapshot to PDF image if available
    pw.MemoryImage? mapImage;
    if (mapSnapshot.isNotEmpty) {
      mapImage = pw.MemoryImage(mapSnapshot);
    }
    
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Survey Report',
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),
              
              pw.SizedBox(height: 20),
              
              // Phase 4: Basic survey information table
              pw.Table(
                border: pw.TableBorder.all(),
                children: [
                  _buildPdfTableRow('Survey Number', feature.surveyNumber),
                  _buildPdfTableRow('Village', feature.name),
                  _buildPdfTableRow('Owner', feature.ownerName),
                  _buildPdfTableRow('Area', feature.areaDisplay),
                  _buildPdfTableRow('Classification', feature.landClassification),
                  _buildPdfTableRow('District', feature.districtName),
                  _buildPdfTableRow('Taluk', feature.talukName),
                  _buildPdfTableRow('Hobli', feature.hobliName),
                  _buildPdfTableRow('Village Name', feature.villageName),
                ],
              ),
              
              pw.SizedBox(height: 20),
              
              // Map Image (if available)
              if (mapImage != null) ...[
                pw.Text(
                  'Survey Map',
                  style: pw.TextStyle(
                    fontSize: 18,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),
                pw.Container(
                  height: 250,
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(),
                  ),
                  child: pw.Image(mapImage, fit: pw.BoxFit.contain),
                ),
                pw.SizedBox(height: 20),
              ],
              
              // Coordinates
              pw.Text(
                'Coordinates',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.SizedBox(height: 10),
              pw.Table(
                border: pw.TableBorder.all(),
                children: [
                  _buildPdfTableRow(
                    'Centroid (Lat, Lng)',
                    '${feature.centroid.latitude.toStringAsFixed(6)}, ${feature.centroid.longitude.toStringAsFixed(6)}',
                  ),
                  _buildPdfTableRow(
                    'Polygon Points',
                    '${feature.rings.fold<int>(0, (sum, ring) => sum + ring.length)} points',
                  ),
                ],
              ),
              
              pw.Spacer(),
              
              // Phase 4: Footer with date
              pw.Divider(),
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Generated on: ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}',
                    style: const pw.TextStyle(fontSize: 10),
                  ),
                  pw.Text(
                    'Bhumi Mitra App',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ],
          );
        },
      ),
    );
    
    return pdf.save();
  }

  static pw.TableRow _buildPdfTableRow(String label, String value) {
    return pw.TableRow(
      children: [
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(
            label,
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
          ),
        ),
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(value),
        ),
      ],
    );
  }
}
